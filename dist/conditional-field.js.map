{"version":3,"sources":["conditional-field.js"],"names":["ConditionalField","args","$controls","$","control","length","parent","setAllVisible","onChangeBound","onChange","bind","on","e","$control","target","setVisible","value","inputValue","controlValue","visibility","$element","closest","find","toString","show","hide","each","index","is","inputType","getInputType","filter","val","off"],"mappings":";;;;;;IAAMA,gB;AACJ,4BAAYC,IAAZ,EAAiB;AAAA;;AACf,SAAKC,SAAL,GAAiBC,EAAEF,KAAKG,OAAP,CAAjB;;AAEA,QAAG,KAAKF,SAAL,CAAeG,MAAf,IAAyB,CAA5B,EAA+B;;AAE/B,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKA,IAAL,CAAUK,MAAV,GAAmB,KAAKL,IAAL,CAAUK,MAAV,IAAoB,KAAvC;;AAEA,SAAKC,aAAL;;AAEA,SAAKC,aAAL,GAAqB,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAArB;AACA,SAAKR,SAAL,CAAeS,EAAf,CAAkB,QAAlB,EAA4B,KAAKH,aAAjC;AACD;;;;6BAEQI,C,EAAG;AACV,UAAIC,WAAWV,EAAES,EAAEE,MAAJ,CAAf;AACA,WAAKC,UAAL,CAAgBF,QAAhB;AACD;;;+BAEUA,Q,EAAU;AACnB,UAAMG,QAAQ,KAAKC,UAAL,CAAgBJ,QAAhB,CAAd;AACA,WAAI,IAAIK,YAAR,IAAwB,KAAKjB,IAAL,CAAUkB,UAAlC,EAA6C;AAC3C,YAAMC,WACJ,KAAKnB,IAAL,CAAUK,MAAV,GACAO,SAASQ,OAAT,CAAkB,KAAKpB,IAAL,CAAUK,MAA5B,EAAqCgB,IAArC,CAA2C,KAAKrB,IAAL,CAAUkB,UAAV,CAAsBD,YAAtB,CAA3C,CADA,GAEAf,EAAG,KAAKF,IAAL,CAAUkB,UAAV,CAAsBD,YAAtB,CAAH,CAHF;;AAKA,YAAGF,MAAMO,QAAN,OAAqBL,aAAaK,QAAb,EAAxB,EAAgD;AAC5CH,mBAASI,IAAT;AACH,SAFD,MAEK;AACDJ,mBAASK,IAAT;AACH;AACF;AACF;;;oCAEe;AAAA;;AACd,WAAKvB,SAAL,CAAewB,IAAf,CAAqB,UAAEC,KAAF,EAASvB,OAAT,EAAsB;AACzC,cAAKW,UAAL,CAAgBZ,EAAEC,OAAF,CAAhB;AACD,OAFD;AAGD;;;iCAEYS,Q,EAAU;AACrB,UAAGA,SAASe,EAAT,CAAY,QAAZ,CAAH,EAAyB;AACvB,eAAO,QAAP;AACD,OAFD,MAEM,IAAGf,SAASe,EAAT,CAAY,QAAZ,CAAH,EAAyB;AAC7B,eAAO,OAAP;AACD,OAFK,MAEA,IAAGf,SAASe,EAAT,CAAY,WAAZ,CAAH,EAA4B;AAChC,eAAO,UAAP;AACD;AACF;;;+BAEUf,Q,EAAU;AACnB,UAAIgB,YAAY,KAAKC,YAAL,CAAkBjB,QAAlB,CAAhB;AAAA,UACIG,QAAQ,EADZ;AAEA,cAAOa,SAAP;AACE,aAAK,UAAL;AACEb,kBAAQH,SAASe,EAAT,CAAY,UAAZ,IAA0B,IAA1B,GAAiC,KAAzC;AACA;AACF,aAAK,OAAL;AACEZ,kBAAQ,KAAKd,SAAL,CAAe6B,MAAf,CAAsB,UAAtB,EAAkCC,GAAlC,EAAR;AACA;AACF;AACEhB,kBAAQH,SAASmB,GAAT,EAAR;AARJ;AAUA,aAAOhB,KAAP;AACD;;;8BAES;AACR,WAAKd,SAAL,CAAe+B,GAAf,CAAmB,QAAnB,EAA6B,KAAKzB,aAAlC;AACD","file":"conditional-field.js","sourcesContent":["class ConditionalField {\n  constructor(args){\n    this.$controls = $(args.control);\n\n    if(this.$controls.length <= 0) return;\n\n    this.args = args;\n    this.args.parent = this.args.parent || false;\n\n    this.setAllVisible();\n\n    this.onChangeBound = this.onChange.bind(this);\n    this.$controls.on('change', this.onChangeBound);\n  }\n\n  onChange(e) {\n    let $control = $(e.target);\n    this.setVisible($control);\n  }\n\n  setVisible($control) {\n    const value = this.inputValue($control);\n    for(let controlValue in this.args.visibility){\n      const $element =\n        this.args.parent ?\n        $control.closest( this.args.parent ).find( this.args.visibility[ controlValue ] ) :\n        $( this.args.visibility[ controlValue ] );\n\n      if(value.toString() === controlValue.toString()){\n          $element.show();\n      }else{\n          $element.hide();\n      }\n    }\n  }\n\n  setAllVisible() {\n    this.$controls.each( ( index, control ) => {\n      this.setVisible($(control));\n    });\n  }\n\n  getInputType($control) {\n    if($control.is('select')){\n      return 'select';\n    }else if($control.is(':radio')){\n      return 'radio';\n    }else if($control.is(':checkbox')){\n      return 'checkbox';\n    }\n  }\n\n  inputValue($control) {\n    let inputType = this.getInputType($control),\n        value = '';\n    switch(inputType){\n      case 'checkbox':\n        value = $control.is(':checked') ? 'on' : 'off';\n        break;\n      case 'radio':\n        value = this.$controls.filter(':checked').val();\n        break;\n      default:\n        value = $control.val();\n    }\n    return value;\n  }\n\n  destroy() {\n    this.$controls.off('change', this.onChangeBound);\n  }\n}"]}